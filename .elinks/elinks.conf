## ELinks 0.13.GIT configuration file

## This is ELinks configuration file. You can edit it manually,
## if you wish so; this file is edited by ELinks when you save
## options through UI, however only option values will be altered
## and missing options will be added at the end of file; if option
## is not written in this file, but in some file included from it,
## it is NOT counted as missing. Note that all your formatting,
## own comments and so on will be kept as-is.
##
## Obviously, if you don't like what ELinks is going to do with
## this file, you can change it by altering the config.saving_style
## option. Come on, aren't we friendly guys after all?



##############################
# Automatically saved options
#

## config 
#  Configuration handling options.

  ## config.saving_style_w [0|1]
  #  This is internal option used when displaying a warning about obsolete
  #  config.saving_style. You shouldn't touch it.
  set config.saving_style_w = 1


## ui 
#  User interface options.

  ## ui.language <language>
  #  Language of user interface. 'System' means that the language will be
  #  extracted from the environment dynamically.
  set ui.language = "System"


set document.browse.links.numbering = 1
# set document.browse.links.active_link.enable_color = 1
# set document.browse.links.active_link.underline = 1
# set terminal._template_.color = 3
# set terminal._template_.underline = 1



##############################
# Automatically saved options
#

## document 
#  Document options.

  ## document.browse 
  #  Document browsing options (mainly interactivity).

    ## document.browse.forms 
    #  Options for handling of the forms interaction.

      ## document.browse.forms.editor <str>
      #  Path to the executable that ELinks should launch when the user requests
      #  to edit a textarea with an external editor.
      #  
      #  If this is blank, ELinks will use the value of the environmental
      #  variable $EDITOR. If $EDITOR is empty or not set, ELinks will then
      #  default to "vi".
      set document.browse.forms.editor = "emacs-wait"




set mime.handler.image_viewer.unix.ask = 0
set mime.handler.image_viewer.unix-xwin.ask = 0

set mime.handler.image_viewer.unix.block = 1
set mime.handler.image_viewer.unix-xwin.block = 0

set mime.handler.image_viewer.unix.program = "fim %"
set mime.handler.image_viewer.unix-xwin.program = "ida %"

# set mime.handler.image_viewer.unix.ask = 1
# set mime.handler.image_viewer.unix.block = 1
# set mime.handler.image_viewer.unix.program = "display %"
# set mime.type.image.jpeg = "image_viewer"
set connection.ssl.cert_verify = 0

set mime.extension.jpg="image/jpg"
set mime.extension.jpeg="image/jpeg"
set mime.extension.png="image/png"
set mime.extension.gif="image/gif"
set mime.extension.bmp="image/bmp"
set terminal.linux.utf_8_io = 1
set terminal.xterm.m11_hack = 1

set mime.type.image.jpg = "image_viewer"
set mime.type.image.jpeg = "image_viewer"
set mime.type.image.png = "image_viewer"
set mime.type.image.gif = "image_viewer"
set mime.type.image.bmp = "image_viewer"

##############################
# Automatically saved options
#

## terminal 
#  Terminal options.

  ## terminal.xterm 
  #  Options specific to this terminal type (according to $TERM value).

    ## terminal.xterm.transparency [0|1]
    set terminal.xterm.transparency = 1
    ## terminal.xterm.colors <num>
    set terminal.xterm.colors = 1
    ## terminal.xterm.utf_8_io [0|1]
    set terminal.xterm.utf_8_io = 0

  ## terminal.screen-linux 
  #  Options specific to this terminal type (according to $TERM value).

    ## terminal.screen-linux.underline [0|1]
    set terminal.screen-linux.underline = 1
    ## terminal.screen-linux.colors <num>
    set terminal.screen-linux.colors = 0
    ## terminal.screen-linux.utf_8_io [0|1]
    set terminal.screen-linux.utf_8_io = 0
    ## terminal.screen-linux.m11_hack [0|1]
    set terminal.screen-linux.m11_hack = 1





##############################
# Automatically saved options
#

## ecmascript 
#  ECMAScript options.

  ## ecmascript.enable [0|1]
  #  Whether to run those scripts inside of documents.
  set ecmascript.enable = 1





##############################
# Automatically saved options
#

## mime 
#  MIME-related options (handlers of various MIME types).

  ## mime.mailcap 
  #  Options for mailcap support.

    ## mime.mailcap.enable [0|1]
    #  Enable mailcap support.
    set mime.mailcap.enable = 0






##############################
# Automatically saved options
#

## mime 
#  MIME-related options (handlers of various MIME types).

  ## mime.mimetypes 
  #  Options for the support of mime.types files. These files can be used to
  #  find the content type of a URL by looking at the extension of the file
  #  name.

    ## mime.mimetypes.enable [0|1]
    #  Enable mime.types support.
    set mime.mimetypes.enable = 0






##############################
# Automatically saved options
#

## protocol 
#  Protocol specific options.

  ## protocol.rewrite 
  #  Rules for rewriting URIs entered in the goto dialog. It makes it possible
  #  to define a set of prefixes that will be expanded if they match a string
  #  entered in the goto dialog. The prefixes can be dumb, meaning that they
  #  work only like URI abbreviations, or smart ones, making it possible to pass
  #  arguments to them like search engine keywords.

    ## protocol.rewrite.smart 
    #  Smart prefixes, see enable-smart description for details.

      ## protocol.rewrite.smart.C <str>
      #  Replacement URI for this smartprefix:
      #  %c in the string means the current URL
      #  %s in the string means the whole argument to smartprefix
      #  %0,%1,...,%9 means argument 0, 1, ..., 9
      #  %% in the string means '%'
      set protocol.rewrite.smart.C = "http://api.call-cc.org/cdoc?q=%s&query-name=Look+up"

      ## protocol.rewrite.smart.c <str>
      #  Replacement URI for this smartprefix:
      #  %c in the string means the current URL
      #  %s in the string means the whole argument to smartprefix
      #  %0,%1,...,%9 means argument 0, 1, ..., 9
      #  %% in the string means '%'
      set protocol.rewrite.smart.c = "http://api.call-cc.org/cdoc?q=%s&query-regex=Regexp"




