#!/usr/bin/env zsh

zmodload zsh/mathfunc

# According to power_supply.h: All voltages, currents, charges,
# energies, time and temperatures in uV, µA, µAh, µWh, seconds and
# tenths of degree Celsius unless otherwise stated.

# Also, according to
# <http://www.spinics.net/lists/linux-acpi/msg22059.html>, remaining
# time is energy_now/power_now.

float full=$(cat /sys/class/power_supply/BAT0/energy_full)
float now=$(cat /sys/class/power_supply/BAT0/energy_now)
float power=$(cat /sys/class/power_supply/BAT0/power_now)

# These calculations seem to overestimate the remaining battery.
# float voltage=$(cat /sys/class/power_supply/BAT0/voltage_now)
# float rate=$(( power * voltage / 1e7 ))
rate=$power

# I really wanted to use electric plug (🔌) and battery (🔋), but they aren't
# supported by my terminal font; even alternating (⏦) and direct current (⎓)
# would have sufficed, but they're similarly unsupported.
declare -A STATES
STATES=(Charging ⚡️
        Discharging ""
        Unknown ⚡️)              # Charged

state=$(cat /sys/class/power_supply/BAT0/status)

# Distinguish between charging and 
if [ $state = "Charging" ] || [ $state = "Unknown" ]; then
    remaining=$(( full - now ))
else
    remaining=$now
fi

# In order to do minutes correctly, we should probably average-dampen
# the rate.
if (( rate == 0 )); then
    time=∞
else
    # Do minutes, seconds; if you want to.
    # minutes=$(printf "%.0f" $(( $remaining / $rate )))
    hours=$(( remaining / rate ))
    minutes=$(( hours * 60 % 60 ))

    # Lop off the minutes.
    hours=$(( floor(hours) ))

    if (( hours == 0 )); then
        time=$(printf "%d min" $minutes)
    else
        time=$(printf "%d h %d min" $hours $minutes)
    fi
fi

# Convert to percentage.
percentage=$(printf "%.1f" $(( 100.0 * now / full )))

# Convert to mWh.
integer now=$(( now / 1000.0 ))

# Convert to mW.
integer rate=$(( rate / 1000.0 ))

echo "${STATES[$state]} ${time} | ${percentage}% | ${now} mWh | ${rate} mW"
