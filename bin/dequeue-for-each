#!/usr/bin/env bash

trap 'kill -TERM -$$' 1 2 3 6

COMMAND=echo

queue="${1:?'Must specify a queue'}"; shift
command="${@:-${COMMAND}}"
fifo=$(mktemp -d)/fifo

mkfifo "${fifo}"

exec 3<> "${fifo}"

# Race condition, though: it might dequeue more than one before we can
# sleep it? No: it puts itself to sleep.
#
# Neither would there be a race condition where the read loop
# encounters a spurious EOF, reading and sleeping prematurely: read
# would otherwise return 1 and the while loop would end.
{
  # Is this necessary? Seems redundant.
  trap continue SIGCONT
  while queue-peek "${queue}" >&3; do
    kill -s SIGSTOP $BASHPID
  done
  # This kills the parent with a non-zero exit code (see below).
  kill $$
} &

dequeuer=$!

# This is too general, unfortunately, and seems to cover INT (if the user issues
# C-c) as well as exhausting the queue.
trap "exit 0" TERM

# Let's deal with the minor annoyance of this thing not closing on
# end-of-queue; maybe it's even a feature in the sense that it will
# begin dequeuing again if we add elements while it's waiting.
#
# No, this doesn't work: read hangs; let the dequeuer commit
# parenticide (see above).
while read -u 3 element; do
  # Exit immediately (without dequeuing) if the command fails.
  ${command} "${element}" || exit $? && queue-dequeue "${queue}"
  kill -s SIGCONT $dequeuer
done
